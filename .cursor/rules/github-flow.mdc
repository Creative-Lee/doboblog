---
alwaysApply: true
description: GitHub Flow 브랜치 관리 및 AI 협업 규칙
---

# GitHub Flow 브랜치 관리 및 AI 협업 규칙

## GitHub Flow 원칙

본 프로젝트는 **GitHub Flow**를 엄격히 따릅니다. 모든 작업은 feature 브랜치에서 진행하며, main 브랜치는 항상 배포 가능한 상태를 유지합니다.

## AI 작업 행동강령 (NEVER DO)

### 1. main 브랜치 직접 작업 금지

- **절대로 main 브랜치에서 커밋하지 말 것**
- main 브랜치에서 `git add`, `git commit` 명령어 실행 금지
- **반드시 feature 브랜치를 생성한 후 작업**

### 2. 작업 전 브랜치 확인 의무

```bash
# 모든 Git 작업 전에 반드시 실행
git branch  # 현재 브랜치 확인
```

- 현재 브랜치가 `main`이면 **즉시 feature 브랜치 생성**
- feature 브랜치가 없으면 **반드시 생성 후 작업**

## 브랜치 전략

### 1. Main 브랜치

- **목적**: 항상 배포 가능한 안정적인 코드 유지
- **규칙**:
  - Main 브랜치에 직접 커밋 절대 금지
  - Pull Request를 통해서만 변경 가능
  - 모든 변경사항은 리뷰 완료 후 병합

### 2. Feature 브랜치

- **명명 규칙**: `feature/[기능명]` 또는 `feature/[이슈번호]-[간단한-설명]`
- **예시**:
  - `feature/setup-turborepo`
  - `feature/mdx-blog-setup`
  - `feature/express-api`
  - `docs/curriculum-update`
  - `fix/typescript-config`

### 3. 기타 브랜치 유형

- **Hotfix**: `hotfix/[문제-설명]`
- **Docs**: `docs/[문서-유형]`
- **Refactor**: `refactor/[리팩터링-범위]`

## 워크플로우

### 1단계: Feature 브랜치 생성

```bash
# main에서 최신 상태 확인
git sw main
git pull origin main

# feature 브랜치 생성 및 이동
git sw -c feature/your-feature-name
```

### 2단계: 작업 진행

- 작은 단위로 자주 커밋
- 커밋 메시지는 [Conventional Commits](https://www.conventionalcommits.org) 규칙 따름 (일부 커스텀)
- 작업의 단위와 맥락을 파악한 후 너무 커지지 않는 범위에서 유기적으로 커밋

### 3단계: Pull Request

- GitHub에서 main으로 PR 생성
- 코드 리뷰 후 승인받기
- Squash Merge 사용 권장

#### PR 템플릿 활용

- GitHub PR 템플릿을 활용하여 체계적으로 작성
- 템플릿의 각 섹션에 맞게 필요한 정보 기입
- 해당사항이 없는 섹션은 "해당사항 없음" 작성 또는 삭제
- 마크다운 주석을 참고하여 목적에 맞게 작성

#### PR 제목 가이드라인

- **작업 요약**: 무엇을 했는지 간단명료하게 작성
- **Conventional Commits 태그 불필요**: `feat:`, `docs:` 등 태그 제외
- **예시**:
  - **좋은 예**: "MDX 블로그 포스팅 기능 추가"
  - **좋은 예**: "사용자 인증 버그 수정"
  - **좋은 예**: "PR 템플릿 경량화"
  - **나쁜 예**: "feat: MDX 블로그 포스팅 기능 추가"
  - **나쁜 예**: "docs: PR 템플릿 경량화"

### 4단계: 정리

```bash
# main으로 이동 후 업데이트
git sw main
git pull origin main

# 병합된 feature 브랜치 삭제
git branch -d feature/your-feature-name
```

## 커밋 메시지 규칙

### 포맷

```
<type>(<scope>): <description>

[optional body]

[optional footer(s)]
```

### Type 종류

- `feat`: 새로운 기능
- `fix`: 버그 수정
- `docs`: 문서 변경
- `lint`: 코드 스타일 변경 (포맷팅, 세미콜론 등)
- `refactor`: 코드 리팩터링
- `test`: 테스트 추가/수정
- `config`: 빌드 프로세스, 패키지 매니저 설정 등

### 예시

```bash
feat(blog): MDX 컴포넌트 렌더링 추가

- MDX 파일 파싱 및 컴포넌트 매핑
- 코드 하이라이팅 지원
- 반응형 이미지 처리

Closes #123
```

## 실수 방지 체크리스트

### 매 작업 시작 전

- [ ] `git branch`로 현재 브랜치 확인
- [ ] main 브랜치가 아닌지 확인
- [ ] feature 브랜치가 없으면 생성

### 커밋 전

- [ ] 사용자에게 커밋 승인 요청
- [ ] 승인 받은 후에만 진행
- [ ] 의미 있는 커밋 단위로 분리

### 작업 완료 후

- [ ] PR 생성
- [ ] 코드 리뷰 요청
- [ ] 승인 후 squash merge

## AI 특별 지침

### 1. 브랜치 상태 인식

- 모든 Git 명령어 실행 전 **반드시 현재 브랜치 확인**
- main 브랜치 감지 시 **즉시 중단하고 feature 브랜치 생성**

### 2. 사용자 승인 프로세스

```
올바른 순서:
1. 작업 완료
2. "커밋을 진행해도 좋을까요?" 질문
3. 사용자 승인 대기
4. 승인 후 커밋 실행
```

### 3. 에러 처리

- main 브랜치에서 실수로 작업했다면:
  1. 즉시 중단
  2. 사과
  3. feature 브랜치 생성 후 작업 이동
  4. main 브랜치 원복

## 성공 기준

### AI 행동 평가 기준

- **main 브랜치 직접 작업 0회**
- **모든 커밋이 feature 브랜치에서 실행**
- **사용자 승인 후 커밋 100%**
- **PR을 통한 병합 100%**

### 실패 시 조치

1. **즉시 사과**
2. **작업 중단**
3. **올바른 절차로 수정**
4. **재발 방지 약속**

## 긴급 상황 대응

### main 브랜치에서 실수로 작업한 경우

```bash
# 1. 즉시 중단
# 2. 변경사항 확인
git status

# 3. 변경사항 stash
git stash

# 4. feature 브랜치 생성
git sw -c feature/emergency-fix

# 5. 변경사항 복원
git stash pop

# 6. 정상 절차로 커밋
```

## 주의사항

### 금지 사항

- main 브랜치에 직접 push
- force push (`git push --force`)
- merge commit (Squash merge 사용)
- 리뷰 없이 PR 병합

## 참고 문서

- [GitHub Flow 공식 문서](https://guides.github.com/introduction/flow)
- [Conventional Commits](https://www.conventionalcommits.org)
- [Git 브랜치 전략](https://nvie.com/posts/a-successful-git-branching-model)

---

**기억하세요**: 이 규칙은 협업의 기본이며, 어떤 상황에서도 예외는 없습니다. GitHub Flow는 단순함이 핵심입니다. 복잡한 브랜치 전략보다는 빠른 피드백과 지속적인 배포에 집중합니다.
